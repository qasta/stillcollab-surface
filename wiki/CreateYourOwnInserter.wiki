#summary How to create a custom DOM inserter with stillcollab-surface

= Introduction =

One of the most important functionality of Surface is the ability to define and add customs inserters.
As it is mentioned in the project summary, Surface does not rely on execCommand, but on custom hand-written DOM inserters. At root, Surface brings two inserters, BlockInserter and InlineInserter (both inheriting from Inserter).

== BlockInserter ==

The BlockInserter allows to create a surrounding Element around the selection. Example :

{{{
 <p>My |sample <span>text</span></p>
 <p>My second| paragraph</p>
}}}
_The | represents the start and end point of the selection_

If I _BlockInsert_ this selection with a PRE element, Surface will produce :
{{{
 <p>My </p>
 <pre>
  <p>sample <span>text</span></p>
  <p>My second</p>
 </pre>
 <p> paragraph</p>
}}}

This inserter is currently used for a lot of inserters, like Pre, Quote, List, Paragraph etc.

== InlineInserter ==
The InlineInserter allows to create Elements surrounding TEXT_NODES around the selection.

Example :
{{{
 <p>My |sample <span>text</span></p>
 <p>My second| paragraph</p>
}}}
_The | represents the start and end point of the selection_

If I _InlineInsert_ this selection with a EM element, Surface will produce :
{{{
 <p>My <em>sample </em><span><em>text</em></span></p>
 <p><em>My second</em> paragraph</p>
}}}

This inserter is currently used for text inserters, like Italic, Bold etc.

= Create an Inserter =

To create an inserter, we have to choose which insertion behavior we want to use (Inline or Block), and inherit it. In the example below, we will see how to create a StrikethroughtInserter, which will InlineInsert a Span Element, and define a style attribute to "text-decoration: line-throught".

First of all, we create the inserter class, inheriting from InlineInserter
{{{
public class StrikethroughtInserter extends InlineInserter<SpanElement> {

  @Override
  protected SpanElement as(Element element) {
    return SpanElement.as(element);
  }

  @Override
  protected List<String> getApplicableTags() {
    return Arrays.asList("p", "span");
  }

  @Override
  protected boolean adjustSelectionAssignee(Element matchingAncestor, Selection selection) {
    return false;
  }

}
}}}

The InlineInserter is generic to the Element type, here SpanElement ; so we have to provide a cast helper (as) and the applicable tags.

== Applicable tags ==
Insomuch as some inserter can be applied to a collection of elements instead of an only element, InlineInserter allows to define which elements can be used to apply an InsertAction (we will see InsertActions bellow).
If a surrounding matching element is available to apply the action, so it will be used by the inserter ; else, the inserter will create a new Span element.